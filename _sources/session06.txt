
.. Foundations 2: Python slides file, created by
   hieroglyph-quickstart on Wed Apr  2 18:42:06 2014.

*************************************************
Session Six: Arguments, Comprehensions, Intro to Object Oriented Programming
*************************************************

Advanced Argument Passing
=========================

Keyword arguments
-----------------

When defining a function, you can specify only what you need -- in any order

.. code-block:: ipython

    In [150]: from __future__ import print_function
    In [151]: def fun(x, y=0, z=0):
       .....:     print(x, y, z, end=" ")
       .....:
    In [152]: fun(1, 2, 3)
    1 2 3
    In [153]: fun(1, z=3)
    1 0 3
    In [154]: fun(1, z=3, y=2)
    1 2 3

.. nextslide::

A Common Idiom:

.. code-block:: python

    def fun(x, y=None):
        if y is None:
            do_something_different
        go_on_here

.. nextslide::

Can set defaults to variables

.. code-block:: ipython

    In [156]: y = 4
    In [157]: def fun(x=y):
        print(u"x is: %s" % x)
       .....:
    In [158]: fun()
    x is: 4

.. nextslide:: But Remember

Defaults are evaluated when the function is defined

.. code-block:: ipython

    In [156]: y = 4
    In [157]: def fun(x=y):
        print(u"x is: %s" % x)
       .....:
    In [158]: fun()
    x is: 4
    In [159]: y = 6
    In [160]: fun()
    x is: 4

Function arguments in variables
-------------------------------

function arguments are really just:

.. rst-class:: build
.. container::

    * a tuple (positional arguments)
    * a dict (keyword arguments)

    .. code-block:: python

        In [1]: def f(x, y, w=0, h=0):
           ...:     msg = u"position: %s, %s -- shape: %s, %s"
           ...:     print(msg % (x, y, w, h))
           ...:
        In [2]: position = (3, 4)
        In [3]: size = {'h': 10, 'w': 20}
        In [4]: f(*position, **size)
        position: 3, 4 -- shape: 20, 10

Function parameters in variables
--------------------------------

You can also pull the parameters out in the function as a tuple and a dict:

.. code-block:: ipython

    In [10]: def f(*args, **kwargs):
       ....:     print(u"the positional arguments are: %s" % unicode(args))
       ....:     print(u"the optional arguments are: %s" % unicode(kwargs))
       ....:
    In [11]: f(2, 3, this=5, that=7)
    the positional arguments are: (2, 3)
    the optional arguments are: {'this': 5, 'that': 7}

Passing a dict to the ``string.format()`` method
------------------------------------------------

Now that you know that keyword args are really a dict, you can do this nifty
trick:

.. rst-class:: build
.. container::

    .. container::

        The ``format`` method takes keyword arguments:

        .. code-block:: ipython

            In [24]: u"My name is {first} {last}".format(last=u"Ewing", first=u"Cris")
            Out[24]: u'My name is Cris Ewing'

    .. container::

        Build a dict of the keys and values:

        .. code-block:: ipython

            In [25]: d = {u"last": u"Ewing", u"first": u"Cris"}

    .. container::

        And pass to ``format()``with ``**``

        .. code-block:: ipython

            In [26]: u"My name is {first} {last}".format(**d)
            Out[26]: u'My name is Paul Pham'




List and Dict Comprehensions
============================

.. rst-class:: left
.. container::

    A bit of functional programming

    .. rst-class:: build
    .. container::

        consider this common ``for`` loop structure:

        .. code-block:: python

            new_list = []
            for variable in a_list:
                new_list.append(expression)

        This can be expressed with a single line using a "list comprehension"

        .. code-block:: python

            new_list = [expression for variable in a_list]

List Comprehensions
-------------------

What about nested for loops?

.. rst-class:: build
.. container::

    .. code-block:: python

        new_list = []
        for var in a_list:
            for var2 in a_list2:
                new_list.append(expression)

    Can also be expressed in one line:

    .. code-block:: python

        new_list =  [exp for var in a_list for var2 in a_list2]

    You get the "outer product", i.e. all combinations.

    (demo)

.. nextslide::

But usually you at least have a conditional in the loop:

.. rst-class:: build
.. container::

    .. code-block:: python

        new_list = []
        for variable in a_list:
            if something_is_true:
                new_list.append(expression)

    You can add a conditional to the comprehension:

    .. code-block:: python

        new_list = [expr for var in a_list if something_is_true]

    (demo)

.. nextslide::

Examples:

.. rst-class:: build
.. container::

    .. code-block:: ipython

        In [341]: [x ** 2 for x in range(3)]
        Out[341]: [0, 1, 4]

        In [342]: [x + y for x in range(3) for y in range(5, 7)]
        Out[342]: [5, 6, 6, 7, 7, 8]

        In [343]: [x * 2 for x in range(6) if not x % 2]
        Out[343]: [0, 4, 8]

    Remember this from last week?

    .. code-block:: python

        [name for name in dir(__builtin__) if "Error" in name]
        ['ArithmeticError',
         'AssertionError',
         'AttributeError',
         ....


Set Comprehensions
------------------

You can do it with sets, too:

.. rst-class:: build
.. container::

    .. code-block:: python

        new_set = {value for value in a_sequence}


    the same as this ``for`` loop:

    .. code-block:: python

        new_set = set()
        for value in a_sequence:
            new_set.add(value)

.. nextslide::

Example: finding all the vowels in a string...

.. rst-class:: build
.. container::

    .. code-block:: ipython

        In [19]: s = "a not very long string"

        In [20]: vowels = set('aeiou')

        In [21]: { let for let in s if let in vowels }
        Out[21]: {'a', 'e', 'i', 'o'}

    Side note: why did I do ``set('aeiou')`` rather than just `aeiou`\ ?


Dict Comprehensions
-------------------

Also with dictionaries

.. rst-class:: build
.. container::

    .. code-block:: python

        new_dict = { key:value for key, value in a_sequence}


    the same as this ``for`` loop:

    .. code-block:: python

        new_dict = {}
        for key, value in a_sequence:
            new_dict[key] = value

.. nextslide::

Example

.. rst-class:: build
.. container::

    .. code-block:: ipython

        In [22]: {i: "this_%i" % i for i in range(5)}
        Out[22]: {0: 'this_0', 1: 'this_1', 2: 'this_2',
                  3: 'this_3', 4: 'this_4'}

    Can you do the same thing with the ``dict()`` constructor?

Classes, instances, attributes, and subclassing



Questions
-------------------------

* How will this prepare me for the dev accelerator?
* What about independent projects for my software portfolio?
* Do we have to worry about proper Git / GitHub technique?

Resources
-------------------------

Beginner-Friendly Textbooks

* `Interactive Python <http://interactivepython.org/runestone/static/Python-F2/index.html>`_
* `Dive Into Python <http://www.diveintopython.net/toc/index.html>`_
* `Learn Python the Hard Way <http://learnpythonthehardway.org/book/>`_

.. nextslide::

Portfolio Projects, Building Community

http://newcoder.io/

Calling Twitter APIs (thanks @mhazani!)


.. nextslide::

Preparation for Dev Accelerator Code Challenge

Django Resources

* `Tango With Django <http://www.tangowithdjango.com>`_
* `The official Django tutorial <https://docs.djangoproject.com/en/1.7/intro/tutorial01/>`_


Change in Classroom
===================

For our last week we will be in The Hardy (the East classroom), at the opposite
end of the basement.

Check in attendance for today!

Please fill out survey responses.


Object Oriented Programming
===========================

.. rst-class:: left
.. container::

    Object-oriented programming narrows the "semantic gap".

    You can model real world objects with software objects.

    We'll talk more about Python implementation than OO design/strengths/weaknesses

More Detailed Reading:
----------------------

`Dive Into Python, 5.3-5.5 on Classes <http://www.diveintopython.net/object_oriented_framework/defining_classes.html>`_
`Learn Python the Hard Way <


Object Oriented Programming
---------------------------

Is Python a "True" Object-Oriented Language?

(Doesn't support full encapsulation, doesn't *require*
classes,  etc...)

.. nextslide::

.. rst-class:: center large

    I don't Care!

.. rst-class:: build
.. container::

    Good software design is about code re-use, clean separation of concerns,
    refactorability, testability, etc...

    OO can help with all that, but:
      * It doesn't guarantee it
      * It can get in the way

.. nextslide::

Python is a Dynamic Language

.. rst-class:: build
.. container::

    That clashes with "pure" OO

    Think in terms of what makes sense for your project -- not any one paradigm
    of software design.


.. nextslide::

So what is "object oriented programming"?

    Objects can be thought of as wrapping their data
    within a set of functions designed to ensure that
    the data are used appropriately, and to assist in
    that use

http://en.wikipedia.org/wiki/Object-oriented_programming

.. nextslide::

Even simpler:

.. rst-class:: build
.. container::

    "Objects are data and the functions that act on them in one place."

    This is the core of "encapsulation"

    In Python: just another namespace.

.. nextslide::

The OO buzzwords:

.. rst-class:: build
.. container::

    .. rst-class:: build

    * data abstraction
    * encapsulation
    * modularity
    * polymorphism
    * inheritance

    Python does all of this, though it doesn't enforce them.

.. rst-class:: build
.. container::

    "OO languages" give you some handy tools to make it easier (and safer):

    .. rst-class:: build

    * polymorphism (duck typing gives you this anyway)
    * inheritance

.. nextslide::

OO has been the dominant model for the past couple decades

.. rst-class:: build
.. container::

    You will need to use it:

    - It's a good idea for a lot of problems

    - You'll need to work with OO packages

    (Even a fair bit of the standard library is Object Oriented)


.. nextslide:: Some definitions

.. rst-class:: build

class
  A category of objects: particular data and behavior: A "circle" (same as a
  type in python)

instance
  A particular object of a class: a specific circle

object
  The general case of a instance -- really any value (in Python anyway)

attribute
  Something that belongs to an object (or class): generally thought of as a
  variable, or single object, as opposed to a ...

method
  A function that belongs to a class

.. nextslide::

.. rst-class:: center large

    Note that in python, functions are first class objects, so a method *is* an
    attribute

Python Classes
==============

.. rst-class:: left
.. container::

    The ``class``  statement

    .. rst-class:: build
    .. container::

        ``class``  creates a new type object:

        .. code-block:: ipython

            In [4]: class C(object):
               ...:     pass
               ...:
            In [5]: type(C)
            Out[5]: type

        A class is a type -- interesting!

        It is created when the statement is run -- much like ``def``

        You don't *have* to subclass from ``object``, but you *should*

        (note on "new style" classes)


Python Classes
--------------

About the simplest class you can write

.. code-block:: python

    >>> class Point(object):
    ...     x = 1
    ...     y = 2
    >>> Point
    <class __main__.Point at 0x2bf928>
    >>> Point.x
    1
    >>> p = Point()
    >>> p
    <__main__.Point instance at 0x2de918>
    >>> p.x
    1

.. nextslide::

Basic Structure of a real class:

.. code-block:: python

    class Point(object):
        # everything defined in here is in the class namespace

        def __init__(self, x, y):
            # everything attached to self is in the instance namespace
            self.x = x
            self.y = y

    ## create an instance of the class
    p = Point(3,4)

    ## access the attributes
    print "p.x is:", p.x
    print "p.y is:", p.y


see: ``Examples/Session06/simple_classes.py``

.. nextslide:: The Initializer

The ``__init__``  special method is called when a new instance of a class is
created.

.. rst-class:: build
.. container::

    You can use it to do any set-up you need

    .. code-block:: python

        class Point(object):
            def __init__(self, x, y):
                self.x = x
                self.y = y


    It gets the arguments passed when you *call* the class object:

    .. code-block:: python

        Point(x, y)

.. nextslide:: ``self``

What is this ``self`` thing?

.. rst-class:: build
.. container::

    The instance of the class is passed as the first parameter for every method.

    Using ``self`` is only a convention -- but you DO want to use it.

    .. code-block:: python

        class Point(object):
            def a_function(self, x, y):
        ...

    Does this look familiar from C-style procedural programming?


.. nextslide:: The Instance Namespace

Anything assigned to a ``self.<xyz>``  attribute is kept in the *instance*
name space -- ``self`` *is* the instance.

.. rst-class:: build
.. container::

    That's where all the instance-specific data is.

    .. code-block:: python

        class Point(object):
            size = 4
            color= "red"
            def __init__(self, x, y):
                self.x = x
                self.y = y

.. nextslide:: The Class Namespace

Anything assigned in the class scope is a class attribute

.. rst-class:: build
.. container::

    Every *instance* of the class shares the same one.

    Note: the methods defined by ``def`` are class attributes as well.

    .. container::

        The class is one namespace, the instance is another.

        .. code-block:: python

            class Point(object):
                size = 4
                color= "red"
            ...
                def get_color():
                    return self.color
            >>> p3.get_color()
             'red'

    Class attributes are accessed with ``self``  also.


.. nextslide:: Class Methods

Typical methods:

.. rst-class:: build
.. container::

    .. code-block:: python

        class Circle(object):
            color = "red"

            def __init__(self, diameter):
                self.diameter = diameter

            def grow(self, factor=2):
                self.diameter = self.diameter * factor


    Methods take some parameters, manipulate the attributes in ``self``.

    They may or may not return something useful.

.. nextslide:: Gotcha!

.. code-block:: python

    ...
        def grow(self, factor=2):
            self.diameter = self.diameter * factor
    ...
    In [205]: C = Circle(5)
    In [206]: C.grow(2,3)

    TypeError: grow() takes at most 2 arguments (3 given)

.. rst-class:: build
.. container::

    Huh???? I only gave 2

    ``self`` is implicitly passed in for you by python.

    (demo of bound vs. unbound methods)

.. nextslide::

Using ``self`` explicitly like this can seem a bit confusing

.. rst-class:: build
.. container::

    But like most of Python's quirks, there's a rationale behind it

    Our BDFL has made the decision that ``self`` will stay, and written
    extensively about why:

    http://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html

LAB / Homework
--------------

Let's say you need to render some html..

.. rst-class:: build
.. container::

    The goal is to build a set of classes that render an html page.

    ``Examples/Session06/sample_html.html``

    We'll start with a single class, then add some sub-classes to specialize the behavior

    Details in:

    :ref:`homework_html_renderer`

    Let's see if we can do step 1. in class...
