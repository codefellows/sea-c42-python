
.. Foundations 2: Python slides file, created by
   hieroglyph-quickstart on Wed Apr  2 18:42:06 2014.

*************************************************
Session Six: Arguments, Comprehensions, Trigrams
*************************************************

Advanced Argument Passing
=========================

Keyword arguments
-----------------

When defining a function, you can specify only what you need -- in any order

.. code-block:: ipython

    In [150]: from __future__ import print_function
    In [151]: def fun(x, y=0, z=0):
       .....:     print(x, y, z, end=" ")
       .....:
    In [152]: fun(1, 2, 3)
    1 2 3
    In [153]: fun(1, z=3)
    1 0 3
    In [154]: fun(1, z=3, y=2)
    1 2 3

.. nextslide::

A Common Idiom:

.. code-block:: python

    def fun(x, y=None):
        if y is None:
            do_something_different
        go_on_here

.. nextslide::

Can set defaults to variables

.. code-block:: ipython

    In [156]: y = 4
    In [157]: def fun(x=y):
        print(u"x is: %s" % x)
       .....:
    In [158]: fun()
    x is: 4

.. nextslide:: But Remember

Defaults are evaluated when the function is defined

.. code-block:: ipython

    In [156]: y = 4
    In [157]: def fun(x=y):
        print(u"x is: %s" % x)
       .....:
    In [158]: fun()
    x is: 4
    In [159]: y = 6
    In [160]: fun()
    x is: 4

Function arguments in variables
-------------------------------

function arguments are really just:

.. rst-class:: build
.. container::

    * a tuple (positional arguments)
    * a dict (keyword arguments)

    .. code-block:: python

        In [1]: def f(x, y, w=0, h=0):
           ...:     msg = u"position: %s, %s -- shape: %s, %s"
           ...:     print(msg % (x, y, w, h))
           ...:
        In [2]: position = (3, 4)
        In [3]: size = {'h': 10, 'w': 20}
        In [4]: f(*position, **size)
        position: 3, 4 -- shape: 20, 10

Function parameters in variables
--------------------------------

You can also pull the parameters out in the function as a tuple and a dict:

.. code-block:: ipython

    In [10]: def f(*args, **kwargs):
       ....:     print(u"the positional arguments are: %s" % unicode(args))
       ....:     print(u"the optional arguments are: %s" % unicode(kwargs))
       ....:
    In [11]: f(2, 3, this=5, that=7)
    the positional arguments are: (2, 3)
    the optional arguments are: {'this': 5, 'that': 7}

Passing a dict to the ``string.format()`` method
------------------------------------------------

Now that you know that keyword args are really a dict, you can do this nifty
trick:

.. rst-class:: build
.. container::

    .. container::

        The ``format`` method takes keyword arguments:

        .. code-block:: ipython

            In [24]: u"My name is {first} {last}".format(last=u"Ewing", first=u"Cris")
            Out[24]: u'My name is Cris Ewing'

    .. container::

        Build a dict of the keys and values:

        .. code-block:: ipython

            In [25]: d = {u"last": u"Ewing", u"first": u"Cris"}

    .. container::

        And pass to ``format()``with ``**``

        .. code-block:: ipython

            In [26]: u"My name is {first} {last}".format(**d)
            Out[26]: u'My name is Paul Pham'




List and Dict Comprehensions
============================

.. rst-class:: left
.. container::

    A bit of functional programming

    .. rst-class:: build
    .. container::

        consider this common ``for`` loop structure:

        .. code-block:: python

            new_list = []
            for variable in a_list:
                new_list.append(expression)

        This can be expressed with a single line using a "list comprehension"

        .. code-block:: python

            new_list = [expression for variable in a_list]

List Comprehensions
-------------------

What about nested for loops?

.. rst-class:: build
.. container::

    .. code-block:: python

        new_list = []
        for var in a_list:
            for var2 in a_list2:
                new_list.append(expression)

    Can also be expressed in one line:

    .. code-block:: python

        new_list =  [exp for var in a_list for var2 in a_list2]

    You get the "outer product", i.e. all combinations.

    (demo)

.. nextslide::

But usually you at least have a conditional in the loop:

.. rst-class:: build
.. container::

    .. code-block:: python

        new_list = []
        for variable in a_list:
            if something_is_true:
                new_list.append(expression)

    You can add a conditional to the comprehension:

    .. code-block:: python

        new_list = [expr for var in a_list if something_is_true]

    (demo)

.. nextslide::

Examples:

.. rst-class:: build
.. container::

    .. code-block:: ipython

        In [341]: [x ** 2 for x in range(3)]
        Out[341]: [0, 1, 4]

        In [342]: [x + y for x in range(3) for y in range(5, 7)]
        Out[342]: [5, 6, 6, 7, 7, 8]

        In [343]: [x * 2 for x in range(6) if not x % 2]
        Out[343]: [0, 4, 8]

    Remember this from last week?

    .. code-block:: python

        [name for name in dir(__builtin__) if "Error" in name]
        ['ArithmeticError',
         'AssertionError',
         'AttributeError',
         ....


Set Comprehensions
------------------

You can do it with sets, too:

.. rst-class:: build
.. container::

    .. code-block:: python

        new_set = {value for value in a_sequence}


    the same as this ``for`` loop:

    .. code-block:: python

        new_set = set()
        for value in a_sequence:
            new_set.add(value)

.. nextslide::

Example: finding all the vowels in a string...

.. rst-class:: build
.. container::

    .. code-block:: ipython

        In [19]: s = "a not very long string"

        In [20]: vowels = set('aeiou')

        In [21]: { let for let in s if let in vowels }
        Out[21]: {'a', 'e', 'i', 'o'}

    Side note: why did I do ``set('aeiou')`` rather than just `aeiou`\ ?


Dict Comprehensions
-------------------

Also with dictionaries

.. rst-class:: build
.. container::

    .. code-block:: python

        new_dict = { key:value for key, value in a_sequence}


    the same as this ``for`` loop:

    .. code-block:: python

        new_dict = {}
        for key, value in a_sequence:
            new_dict[key] = value

.. nextslide::

Example

.. rst-class:: build
.. container::

    .. code-block:: ipython

        In [22]: {i: "this_%i" % i for i in range(5)}
        Out[22]: {0: 'this_0', 1: 'this_1', 2: 'this_2',
                  3: 'this_3', 4: 'this_4'}

    Can you do the same thing with the ``dict()`` constructor?

Classes, instances, attributes, and subclassing



Resources
-------------------------

Beginner-Friendly Textbooks

* `Interactive Python <http://interactivepython.org/runestone/static/Python-F2/index.html>`_
* `Dive Into Python <http://www.diveintopython.net/toc/index.html>`_
* `Learn Python the Hard Way <http://learnpythonthehardway.org/book/>`_

.. nextslide::

Portfolio Projects, Building Community

http://newcoder.io/

Calling Twitter APIs (thanks @mhazani!)


.. nextslide::

Preparation for Dev Accelerator Code Challenge

Django Resources

* `Tango With Django <http://www.tangowithdjango.com>`_
* `The official Django tutorial <https://docs.djangoproject.com/en/1.7/intro/tutorial01/>`_


Change in Classroom
===================

For our last week we will be in The Hardy (the East classroom), at the opposite
end of the basement.

Check in attendance for today!

Please fill out survey responses.


