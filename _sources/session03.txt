*********************************************************
Session Three: Sequences, Iteration and String Formatting
*********************************************************

Review/Questions
================

Review of Previous Session
--------------------------

.. rst-class:: build

* Functions
* Parameters
* Positional, Keyword Parameters
* Default/Optional Parameters

Unix & Git Workshop This Saturday
=======================================

This is a vital pre-requisite for the current course!
I taught the previous two workshops in Seattle,
so I'll know whether you passed it or not :]

| Unix & Git For Everyone Workshop
| This Saturday, 27 June 2015
| 9am - 5pm
| https://www.codefellows.org/class-calendar#sea-w30
| Register online

Today's Agenda
=======================================

7:00

* Review Homework
* Substitution of Return Values
* Recursion

* Booleans
* Modules
* Assert Statements

7:30 New Material

* Sequences (Lists, Tuples, Indexing, Slicing)
* Iteration (While loops)
* Strings and Formatting

8:00 Pair Programming

8:30 New Homework

Substitution of Return Values
=======================================

* Function calls are substituted for their return values
* Function calls can be included in expressions
* Function calls can be nested

Recursion
=======================================

[Demo of Fibonacci Sequence]


Code Structure, Modules, and Namespaces
=======================================

.. rst-class:: center large

Scopes within scopes, attributes within attributes

Module Puzzle
--------------

Write a module (file) called `mystery.py` with a function
inside that solves one of the CodingBat exercises from
before:

:download:`codingbat.rst <../code/session02/codingbat.rst>`

Be sure to write a good docstring for your function describing
how to use it, like this example.

.. nextslide:: Good Function Docstrings

.. code-block:: python

  def square_root(n):
      """
      Calculate the square root of a number.

      Args:
          n: the number to get the square root of.
      Returns:
          the square root of n.

      """
      pass

.. nextslide:: Check if it's Main

Include a check to see if the module is being run,
or it is being imported.

If it is being run, execute some test code that
calls your function.

.. nextslide::

Remember, Do These Steps

* Read through the puzzle for that section.
* Pick a partner. Describe what your goal is.
* Read through the section `Code Structure, Modules, Namespaces`. Try typing any code you see in `ipython` or `python`
* Come up with three questions as you are reading with your partner.
* We'll come around and help you.
* We'll regroup and you'll teach me the slides.
* We'll solve the puzzle together.


Code Structure
--------------

In Python, the structure of your code is determined by whitespace.

How you *indent* your code determines how it is structured

::

    block statement:
        some code body
        some more code body
        another block statement:
            code body in
            that block

The colon that terminates a block statement is also important...

.. nextslide:: One-liners

You can put a one-liner after the colon:

.. code-block:: ipython

    In [167]: x = 12
    In [168]: if x > 4: print(x)
    12

But this should only be done if it makes your code **more** readable.


.. nextslide:: Spaces vs. Tabs

Whitespace is important in Python.

An indent *could* be:

* Any number of spaces
* A tab
* A mix of tabs and spaces:

If you want anyone to take you seriously as a Python developer:

.. rst-class:: centered

**Always use four spaces -- really!**

`(PEP 8)`_

.. _(PEP 8): http://legacy.python.org/dev/peps/pep-0008/


.. nextslide:: Spaces Elsewhere

Other than indenting -- space doesn't matter, technically.

.. code-block:: python

    x = 3*4+12/func(x,y,z)
    x = 3*4 + 12 /   func (x,   y, z)

But you should strive for proper style.  Read `PEP 8`_ and install a linter in
your editor.

.. _PEP 8: http://legacy.python.org/dev/peps/pep-0008/


Modules and Packages
--------------------

Python is all about *namespaces* --  the "dots"

``name.another_name``

The "dot" indicates that you are looking for a name in the *namespace* of the
given object. It could be:

* name in a module
* module in a package
* attribute of an object
* method of an object


.. nextslide:: Modules

A module is simply a namespace.

It might be a single file, or it could be a collection of files that define a
shared API.

To a first approximation, you can think of the files you write that end in
``.py`` as modules.

.. nextslide:: Packages

A package is a module with other modules in it.

On a filesystem, this is represented as a directory that contains one or more
``.py`` files, one of which **must** be called ``__init__.py``.

When you have a package, you can import the package, or any of the modules
inside it.

.. nextslide:: importing modules

.. code-block:: python

    import modulename
    from modulename import this, that
    import modulename as a_new_name
    from modulename import this as that

.. ifslides::

    .. rst-class:: centered

    (demo)


.. nextslide:: importing from packages

.. code-block:: python

    import packagename.modulename
    from packagename.modulename import this, that
    from package import modulename

.. ifslides::

    .. rst-class:: centered

    (demo)

http://effbot.org/zone/import-confusion.htm

.. nextslide:: importing from packages

.. code-block:: python

    from modulename import *

.. rst-class:: centered large

**Don't do this!**


Import
------

When you import a module, or a symbol from a module, the Python code is
*compiled* to **bytecode**.

.. rst-class:: build
.. container::

    The result is a ``module.pyc`` file.

    This process **executes all code at the module scope**.

    For this reason, it is good to avoid module-scope statements that have
    global side-effects.


.. nextslide:: Re-import

The code in a module is NOT re-run when imported again

It must be explicitly reloaded to be re-run

.. code-block:: python

    import modulename
    reload(modulename)

.. ifslides::

    .. rst-class:: centered

    (demo)


.. nextslide:: Running a Module

In addition to importing modules, you can run them.

There are a few ways to do this:

.. rst-class:: build

* ``$ python hello.py``   -- must be in current working directory
* ``$ python -m hello``   -- any module on PYTHONPATH anywhere on the system
* ``$ ./hello.py``        -- put ``#!/usr/bin/env python``  at top of module
  (Unix)
* ``In [149]: run hello.py``     -- at the IPython prompt -- running a module
  brings its names into the interactive namespace


.. nextslide:: Running a Module

Like importing, running a module executes all statements at the module level.

.. rst-class:: build
.. container::

    But there's an important difference.

    When you *import* a module, the value of the symbol ``__name__`` in the
    module is the same as the filename.

    When you *run* a module, the value of the symbol ``__name__`` is
    ``__main__``.

    This allows you to create blocks of code that are executed *only when you
    run a module*

    .. code-block:: python

        if __name__ == '__main__':
            # Do something interesting here
            # It will only happen when the module is run

.. nextslide:: "main" blocks

This is useful in a number of cases.

.. rst-class:: build
.. container::

    You can put code here that lets your module be a utility script

    You can put code here that demonstrates the functions contained in your
    module

    You can put code here that proves that your module works.

.. ifslides::

    [demo]


.. nextslide:: ``Assert``

Writing ``tests`` that demonstrate that your program works is an important part
of learning to program.

The python ``assert`` statement is useful in writing ``main`` blocks that test
your code.

.. code-block:: ipython

    In [1]: def add(n1, n2):
       ...:     return n1 + n2
       ...:

    In [2]: assert add(3, 4) == 7

    In [3]: assert add(3, 4) == 10
    ---------------------------------------------------------------------------
    AssertionError                            Traceback (most recent call last)
    <ipython-input-3-6731d4ac4476> in <module>()
    ----> 1 assert add(3, 4) == 10

    AssertionError:

In-Class Lab
============

.. rst-class:: center large

Import Interactions

Exercises
---------

Experiment with importing different ways:

.. code-block:: ipython

    In [3]: import math

    In [4]: math.<TAB>
    math.acos       math.degrees    math.fsum       math.pi
    math.acosh      math.e          math.gamma      math.pow
    math.asin       math.erf        math.hypot      math.radians
    math.asinh      math.erfc       math.isinf      math.sin
    math.atan       math.exp        math.isnan      math.sinh
    math.atan2      math.expm1      math.ldexp      math.sqrt
    math.atanh      math.fabs       math.lgamma     math.tan
    math.ceil       math.factorial  math.log        math.tanh
    math.copysign   math.floor      math.log10      math.trunc
    math.cos        math.fmod       math.log1p
    math.cosh       math.frexp      math.modf

.. nextslide::

.. code-block:: ipython

    In [6]: math.sqrt(4)
    Out[6]: 2.0
    In [7]: import math as m
    In [8]: m.sqrt(4)
    Out[8]: 2.0
    In [9]: from math import sqrt
    In [10]: sqrt(4)
    Out[10]: 2.0


.. nextslide::

Experiment with importing different ways:

.. code-block:: python

    import sys
    print(sys.path)
    import os
    print(os.path)


You wouldn't want to import * those!

  -- check out

.. code-block:: python

    os.path.split(u'/foo/bar/baz.txt')
    os.path.join(u'/foo/bar', u'baz.txt')

Module Puzzle Solved
--------------------

Now we will solve our Module Puzzle!

Write a module (file) called `mystery.py` with a function
inside that solves one of the CodingBat exercises from
before:

:download:`codingbat.rst <../code/session02/codingbat.rst>`

Be sure to write a good docstring for your function describing
how to use it, like this example.

.. nextslide:: Good Function Docstrings

.. code-block:: python

  def square_root(n):
      """
      Calculate the square root of a number.

      Args:
          n: the number to get the square root of.
      Returns:
          the square root of n.

      """
      pass

.. nextslide:: Check if it's Main

Include a check to see if the module is being run,
or it is being imported.

If it is being run, execute some test code that
calls your function.

.. nextslide:: Live Demo

Someone upload their file to Slack and volunteer.

I'll go through the process of importing the module,
and we'll try to figure out what your function does,
and how to run it.

Course Logistics
---------------

* Attendance, grades, and homework due dates on Canvas
* Course Notes
* Use of Slack

Survey Feedback
---------------



Homework Review
---------------

.. rst-class:: center large

Any questions that are nagging?
