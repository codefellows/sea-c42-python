********************************************
Session Two: Functions and Booleans
********************************************

.. ifslides::

    .. rst-class:: center large

    Oh My!



Review/Questions
================

Review of Previous Session
--------------------------

.. rst-class:: build

  * Values and Types
  * Expressions
  * Intro to functions

Clarifications
==============

* Python Development Accelerator
* Blank lines don't always end a block

Review of Previous Session
--------------------------

.. rst-class:: build

  * Values and Types
  * Expressions
  * Intro to functions

Homework Review
---------------

.. rst-class:: center large

Any questions that are nagging?

Today's Plan
================

* Github Upstream
* Functions
* Booleans
* Modules

For Each Section
----------------

* Read through the puzzle for that section.
* Pick a partner. Describe what your goal is.
* Read through the section. Try typing any code you see in `ipython` or `python`
* Come up with three questions as you are reading with your partner.
* We'll come around and help you.
* We'll regroup and you'll teach me the slides.
* We'll solve the puzzle together.

Git Work
========

.. rst-class:: center large

Let's get to know your fellow students!

Git Work Puzzle
------------------------
We want to pull your classmates "Gitting to Know You"
introductions from the (upstream) class repo.

Remember, do these steps:

* Read through the puzzle for that section.
* Pick a partner, describe what your goal is.
* Read through the slides. Try typing any code you see in `ipython` or `python`
* Come up with three questions as you are reading with your partner.
* We'll come around and help you.
* We'll regroup and you'll teach me the slides.
* We'll solve the puzzle together.

Working with an Upstream
------------------------

You've created a fork of the class repository from the ``codefellows`` account
on GitHub.

You've pushed your own changes to that fork, and then issued pull requests to
have that worked merged back to the ``codefellows`` original.

You want to keep your fork up-to-date with that original copy as the class goes
forward.

To do this, you use the git concept of an **upstream** repository.

.. nextslide::

Since ``git`` is a *distributed* versioning system, there is no **central**
repository that serves as the one to rule them all.

Instead, you work with *local* repositories, and *remotes* that they are
connected to.

Cloned repositories get an *origin* remote for free:

.. code-block:: bash

    $ git remote -v
    origin  https://github.com/cewing/sea-c34-python.git (fetch)
    origin  https://github.com/cewing/sea-c34-python.git (push)

This shows that the local repo on my machine *originated* from the one in my gitHub account (the one it was cloned from)

.. nextslide:: Adding a Remote

You can add *remotes* at will, to connect your *local* repository to other
copies of it in different remote locations.

This allows you to grab changes made to the repository in these other
locations.

For our class, we will add an *upstream* remote to our local copy that points
to the original copy of the material in the ``codefellows`` account.

.. code-block:: bash

    $ git remote add upstream https://github.com/codefellows/sea-c34-python.git

    $ git remote -v
    origin  https://github.com/cewing/sea-c34-python.git (fetch)
    origin  https://github.com/cewing/sea-c34-python.git (push)
    upstream  https://github.com/codefellows/sea-c34-python.git (fetch)
    upstream  https://github.com/codefellows/sea-c34-python.git (push)

.. nextslide:: Fetching Everything.

To get the updates from your new remote, you'll need first to fetch everything:

.. code-block:: bash

    $ git fetch --all
    Fetching origin
    Fetching upstream
    ...

Then you can see the branches you have locally available:

.. code-block:: bash

    $ git branch -a
    * master
      remotes/origin/HEAD -> origin/master
      remotes/origin/gh-pages
      remotes/origin/master
      remotes/upstream/gh-pages
      remotes/upstream/master

(the gh-pages branch is used to publish these notes)

.. nextslide:: Fetching Upstream Changes

Finally, you can fetch and then merge changes from the upstream master.

Start by making sure you are on your own master branch:

.. code-block:: bash

    $ git checkout master

This is **really really** important.  Take the time to ensure you are where you
think you are.

.. nextslide:: Merging Upstream Changes

Then, fetch the upstream master branch and merge it into your master:

.. code-block:: bash

    $ git fetch upstream master
    From https://github.com/codefellows/sea-c34-python.git
     * branch            master     -> FETCH_HEAD

    $ git merge upstream/master
    Updating 3239de7..9ddbdbb
    Fast-forward
     Examples/README.rst              |  4 ++++
    ...
     create mode 100644 Examples/README.rst
    ...

NOTE: you can do that in one step with:

.. code-block:: bash

  $ git pull upstream master

.. nextslide:: Pushing to Origin

Now all the changes from *upstream* are present in your local clone.

In order to preserve them in your fork on GitHub, you'll have to push:

.. code-block:: bash

    $ git status
    On branch master
    Your branch is ahead of 'origin/master' by 10 commits.
      (use "git push" to publish your local commits)
    $ git push origin master
    Counting objects: 44, done.
    ...
    $

(A simple ``git push`` will usually do the right thing)

.. nextslide:: Daily Workflow

You can incorporate this into your daily workflow: ::

    $ git checkout master
    $ git pull upstream master
    $ git push
    [do some work]
    $ git commit -a
    [add a good commit message]
    $ git push
    [make a pull request]

Git Work Puzzle Solved!
------------------------
We wanted to pull your classmates "Gitting to Know You"
introductions from the (upstream) class repo.

When you make that happen, congratulations! Find your partner's
introduction and read them to each other.

Some Needed Plumbing
=====================

.. rst-class:: center large

Because there's a few things you just gotta have:

* collections
* looping

Collections and Looping
-----------------

It turns out you can't really do much at all without at least a collection (container) type,
conditionals and looping...


.. nextslide:: Review: if

``if`` and ``elif`` allow you to make decisions:

.. code-block:: python

    if a:
        print(u'a')
    elif b:
        print(u'b')
    elif c:
        print(u'c')
    else:
        print(u'that was unexpected')


.. nextslide:: Test Your Knowledge: if

What's the difference between these two:

.. code-block:: python

    if a:
        print(u'a')
    elif b:
        print(u'b')
    ## versus...
    if a:
        print(u'a')
    if b:
        print(u'b')

Try it at http://pythontutor.com

.. nextslide:: switch?

Many languages have a ``switch`` construct:

.. code-block:: js

    switch (expr) {
      case "Oranges":
        document.write("Oranges are $0.59 a pound.<br>");
        break;
      case "Apples":
        document.write("Apples are $0.32 a pound.<br>");
        break;
      case "Mangoes":
      case "Papayas":
        document.write("Mangoes and papayas are $2.79 a pound.<br>");
        break;
      default:
        document.write("Sorry, we are out of " + expr + ".<br>");
    }

.. nextslide:: switch?

**Not Python**

use ``if..elif..elif..else``

(or a dictionary, or subclassing....)


.. nextslide:: lists

A way to store a bunch of stuff in order

Pretty much like an "array" or "vector" in other languages

.. code-block:: python

    a_list = [2, 3, 5, 9]
    a_list_of_strings = [u'this', u'that', u'the', u'other']


.. nextslide:: tuples

Another way to store an ordered list of things

.. code-block:: python

    a_tuple = (2, 3, 4, 5)
    a_tuple_of_strings = (u'this', u'that', u'the', u'other')


Tuples are **not** the same as lists.

The exact difference is a topic for next session.


.. nextslide:: for

Sometimes called a 'determinate' loop

When you need to do something to everything in a sequence

.. code-block:: ipython

    In [10]: a_list = [2, 3, 4, 5]

    In [11]: for item in a_list:
       ....:     print(item)
       ....:
    2
    3
    4
    5

Try it at http://pythontutor.com

.. nextslide:: range() and for

Range builds lists of numbers automatically

Use it when you need to do something a set number of times

.. code-block:: ipython

    In [12]: range(6)
    Out[12]: [0, 1, 2, 3, 4, 5]

    In [13]: for i in range(6):
       ....:     print(u'*', end=u' ')
       ....:
    * * * * * *

Try it at http://pythontutor.com

.. nextslide:: Intricacies

This is enough to get you started.

Each of these have intricacies special to python

We'll get to those over the next couple of classes


Functions
=========

Functions Puzzle
---------

In your local repo, after you've updated from upstream,
go to `session02` and find the file `stackoverflow.py`.

In it, you will find a function that calls itself.

* What problems does this cause?
* Why do you think the problem occurs?
* How can you count the number of times a function can call itself?
* Modify the program to implement your solution.

.. nextslide::

Remember, Do These Steps

* Read through the puzzle for that section.
* Pick a partner. Describe what your goal is.
* Read through the section `Functions`. Try typing any code you see in `ipython` or `python`
* Come up with three questions as you are reading with your partner.
* We'll come around and help you.
* We'll regroup and you'll teach me the slides.
* We'll solve the puzzle together.


Review
------

Defining a function:

.. code-block:: python

    def fun(x, y):
        z = x + y
        return z


x, y, z are *local* names


Local vs. Global
----------------

Symbols bound in Python have a *scope*

That *scope* determines where a symbol is visible, or what value it has in a
given block.

.. code-block:: ipython

    In [14]: x = 32
    In [15]: y = 33
    In [16]: z = 34
    In [17]: def fun(y, z):
       ....:     print(x, y, z)
       ....:
    In [18]: fun(3, 4)
    32 3 4


x is global, y and z local to the function

.. nextslide::

But, did the value of y and z change in the *global* scope?

.. code-block:: ipython

    In [19]: y
    Out[19]: 33

    In [20]: z
    Out[20]: 34

.. nextslide::

In general, you should use global bindings mostly for constants.

In python we designate global constants by typing the symbols we bind to them
in ALL_CAPS

.. code-block:: python

    INSTALLED_APPS = [u'foo', u'bar', u'baz']
    CONFIGURATION_KEY = u'some secret value'
    ...

This is just a convention, but it's a good one to follow.


.. nextslide:: Global Gotcha

Take a look at this function definition:

.. code-block:: ipython

    In [21]: x = 3

    In [22]: def f():
       ....:     y = x
       ....:     x = 5
       ....:     print(x)
       ....:     print(y)
       ....:

What is going to happen when we call ``f``

.. nextslide:: Global Gotcha

Try it and see:

.. code-block:: ipython

    In [23]: f()
    ---------------------------------------------------------------------------
    UnboundLocalError                         Traceback (most recent call last)
    <ipython-input-23-0ec059b9bfe1> in <module>()
    ----> 1 f()

    <ipython-input-22-9225fa53a20a> in f()
          1 def f():
    ----> 2     y = x
          3     x = 5
          4     print(x)
          5     print(y)

    UnboundLocalError: local variable 'x' referenced before assignment

Because you are binding the symbol ``x`` locally, it becomes a local and masks
the global value already bound.


Parameters
----------

So far we've seen simple parameter lists:

.. code-block:: python

    def fun(x, y, z):
        print(x, y, z)

These types of parameters are called *positional*

When you call a function, you **must** provide arguments for all *positional*
parameters *in the order they are listed*


.. nextslide::

You can provide *default values* for parameters in a function definition:

.. code-block:: ipython

    In [24]: def fun(x=1, y=2, z=3):
       ....:     print(x, y, z)
       ....:

When parameters are given with default values, they become *optional*

.. code-block:: ipython

    In [25]: fun()
    1 2 3


.. nextslide::

You can provide arguments to a function call for *optional* parameters
positionally:

.. code-block:: ipython

    In [26]: fun(6)
    6 2 3
    In [27]: fun(6, 7)
    6 7 3
    In [28]: fun(6, 7, 8)
    6 7 8

Or, you can use the parameter name as a *keyword* to indicate which you mean:

.. code-block:: ipython

    In [29]: fun(y=4, x=1)
    1 4 3

.. nextslide::

Once you've provided a *keyword* argument in this way, you can no longer
provide any *positional* arguments:

.. code-block:: ipython

    In [30]: fun(x=5, 6)
      File "<ipython-input-30-4529e5befb95>", line 1
        fun(x=5, 6)
    SyntaxError: non-keyword arg after keyword arg

.. nextslide:: Parameters and Unpacking

This brings us to a fun feature of Python function definitions.

You can define a parameter list that requires an **unspecified** number of
*positional* or *keyword* arguments.

The key is the ``*`` (splat) or ``**`` (double-splat) operator:

.. code-block:: ipython

    In [31]: def fun(*args, **kwargs):
       ....:     print(args, kwargs)
       ....:
    In [32]: fun(1)
    (1,) {}
    In [33]: fun(1, 2, zombies=u"brains")
    (1, 2) {'zombies': u'brains'}
    In [34]: fun(1, 2, 3, zombies=u"brains", vampires=u"blood")
    (1, 2, 3) {'vampires': u'blood', 'zombies': u'brains'}

**args** and **kwargs** are *conventional* names for these.


Documentation
-------------

It's often helpful to leave information in your code about what you were
thinking when you wrote it.

This can help reduce the number of `WTFs per minute`_ in reading it later.

.. _WTFs per minute: http://www.osnews.com/story/19266/WTFs_m

There are two approaches to this:

.. rst-class:: build

* Comments
* Docstrings

.. nextslide:: Comments

Comments go inline in the body of your code, to explain reasoning:

.. code-block:: python

    if (frobnaglers > whozits):
        # borangas are shermed to ensure frobnagler population
        # does not grow out of control
        sherm_the_boranga()

You can use them to mark places you want to revisit later:

.. code-block:: python

    for partygoer in partygoers:
        for baloon in baloons:
            for cupcake in cupcakes:
                # TODO: Reduce time complexity here.  It's killing us
                #  for large parties.
                resolve_party_favor(partygoer, baloon, cupcake)

.. nextslide:: Comments

Be judicious in your use of comments.

Use them when you need to.

Make them useful.

This is not useful:

.. code-block:: python

    for sponge in sponges:
        # apply soap to each sponge
        worker.apply_soap(sponge)

.. nextslide:: Docstrings

In Python, ``docstrings`` are used to provide in-line documentation in a number
of places.

The first place we will see is in the definition of ``functions``.

To define a function you use the ``def`` keyword.

If a ``string literal`` is the first thing in the function block following the
header, it is a ``docstring``:

.. code-block:: python

    def complex_function(arg1, arg2, kwarg1=u'bannana'):
        """Return a value resulting from a complex calculation."""
        # code block here

You can then read this in an interpreter as the ``__doc__`` attribute of the
function object.

.. nextslide:: Docstrings

A ``docstring`` should:

.. rst-class:: build

* be a complete sentence in the form of a command describing what the function
  does.

  * """Return a list of values based on blah blah""" is a good docstring
  * """Returns a list of values based on blah blah""" is *not*

* fit onto a single line.

  * If more description is needed, make the first line a complete sentence and
    add more lines below for enhancement.

* be enclosed with triple-quotes.

  * This allows for easy expansion if required at a later date
  * Always close on the same line if the docstring is only one line.

For more information see `PEP 257: Docstring Conventions`_.

.. _PEP 257\: Docstring Conventions: http://legacy.python.org/dev/peps/pep-0257/


Recursion
---------

You've seen functions that call other functions.

If a function calls *itself*, we call that **recursion**

Like with other functions, a call within a call establishes a *call stack*

With recursion, if you are not careful, this stack can get *very* deep.

Python has a maximum limit to how much it can recurse. This is intended to
save your machine from running out of RAM.

.. nextslide:: Recursion can be Useful

Recursion is especially useful for a particular set of problems.

For example, take the case of the *factorial* function.

In mathematics, the *factorial* of an integer is the result of multiplying that
integer by every integer smaller than it down to 1.

::

    5! == 5 * 4 * 3 * 2 * 1

We can use a recursive function nicely to model this mathematical function

.. ifslides::

    .. rst-class:: centered

    [demo]

Functions Puzzle Solved!
------------------------

Now it's time to solve the puzzle. Remember:

In your local repo, after you've updated from upstream,
go to `session02` and find the file `stackoverflow.py`.

In it, you will find a function that calls itself.

* What problems does this cause?
* Why do you think the problem occurs?
* How can you count the number of times a function can call itself?
* Modify the program to implement your solution.



Boolean Expressions
===================

Boolean Puzzle
---------

* Look up the ``%``  operator. What do these do?

  * ``10 % 7 == 3``
  * ``14 % 7 == 0``

* Write a program that prints the numbers from 1 to 100 inclusive. But for
  multiples of three print "Fizz" instead of the number and for the multiples
  of five print "Buzz". For numbers which are multiples of both three and five
  print "FizzBuzz" instead.
* If you finish that, try your hand at writing solutions to one or more of the
  problems in :download:`codingbat.rst <../code/session02/codingbat.rst>`

.. nextslide::

Remember, Do These Steps

* Read through the puzzle for that section.
* Pick a partner. Describe what your goal is.
* Read through the section `Booleans`. Try typing any code you see in `ipython` or `python`
* Come up with three questions as you are reading with your partner.
* We'll come around and help you.
* We'll regroup and you'll teach me the slides.
* We'll solve the puzzle together.

Truthiness
----------

What is true or false in Python?

.. rst-class:: build

* The Booleans: ``True``  and ``False``
* "Something or Nothing"
*  http://mail.python.org/pipermail/python-dev/2002-April/022107.html


.. nextslide::

Determining Truthiness:

.. code-block:: python

    bool(something)


.. nextslide:: What is False?

.. rst-class:: build

* ``None``
* ``False``
* **Nothing:**

* zero of any numeric type: ``0, 0L, 0.0, 0j``.
* any empty sequence, for example, ``"", (), []``.
* any empty mapping, for example, ``{}`` .
* instances of user-defined classes, if the class defines a ``__nonzero__()``
  or ``__len__()`` method, when that method returns the integer zero or bool
  value ``False``.

* http://docs.python.org/library/stdtypes.html

.. nextslide:: What is True?

.. rst-class:: center large

Everything Else


.. nextslide:: Pythonic Booleans

Any object in Python, when passed to the ``bool()`` type object, will
evaluate to ``True`` or ``False``.

When you use the ``if`` keyword, it automatically does this to the statement provided.

Which means that this is redundant, and not Pythonic:

.. code-block:: python

    if xx == True:
        do_something()
    # or even worse:
    if bool(xx) == True:
        do_something()

Instead, use what Python gives you:

.. code-block:: python

    if xx:
        do_something()


and, or and not
----------------

Python has three boolean keywords, ``and``, ``or`` and ``not``.

``and`` and ``or`` are binary expressions, and evaluate from left to right.

``and`` will return the first operand that evaluates to False, or the last
operand if none are True:

.. code-block:: ipython

    In [35]: 0 and 456
    Out[35]: 0

``or`` will return the first operand that evaluates to True, or the last
operand if none are True:

.. code-block:: ipython

    In [36]: 0 or 456
    Out[36]: 456

.. nextslide::

On the other hand, ``not`` is a unary expression and inverts the boolean value
of its operand:

.. code-block:: ipython

    In [39]: not True
    Out[39]: False

    In [40]: not False
    Out[40]: True

.. nextslide:: Shortcutting

Because of the return value of these keywords, you can write concise
statements:

::

                      if x is false,
    x or y               return y,
                         else return x

                      if x is false,
    x and y               return  x
                          else return y

                      if x is false,
    not x               return True,
                        else return False


.. nextslide:: Chaining

.. code-block:: python

    a or b or c or d
    a and b and c and d


The first value that defines the result is returned

.. ifslides::

    .. rst-class:: centered

    (demo)


.. nextslide:: Ternary Expressions

This is a fairly common idiom:

.. code-block:: python

    if something:
        x = a_value
    else:
        x = another_value

In other languages, this can be compressed with a "ternary operator"::

    result = a > b ? x : y;

In python, the same is accomplished with the ternary expression:

.. code-block:: python

    y = 5 if x > 2 else 3

PEP 308:
(http://www.python.org/dev/peps/pep-0308/)


Boolean Return Values
---------------------

Remember this puzzle from your CodingBat exercises?

.. code-block:: python

    def sleep_in(weekday, vacation):
        if weekday == True and vacation == False:
            return False
        else:
            return True

Though correct, that's not a particularly Pythonic way of solving the problem.

Here's a better solution:

.. code-block:: python

    def sleep_in(weekday, vacation):
        return not (weekday == True and vacation == False)


.. nextslide::

And here's an even better one:

.. code-block:: python

    def sleep_in(weekday, vacation):
        return (not weekday) or vacation


.. nextslide:: bools are integers?

In python, the boolean types are subclasses of integer:

.. code-block:: ipython

    In [1]: True == 1
    Out[1]: True
    In [2]: False == 0
    Out[2]: True


And you can even do math with them (though it's a bit odd to do so):

.. code-block:: ipython

    In [6]: 3 + True
    Out[6]: 4

.. ifslides::

    .. rst-class:: center

    (demo)


Boolean Puzzle Solved
---------------------

Remember our puzzle:

* Look up the ``%``  operator. What do these do?

  * ``10 % 7 == 3``
  * ``14 % 7 == 0``

* Write a program that prints the numbers from 1 to 100 inclusive. But for
  multiples of three print "Fizz" instead of the number and for the multiples
  of five print "Buzz". For numbers which are multiples of both three and five
  print "FizzBuzz" instead.
* If you finish that, try your hand at writing solutions to one or more of the
  problems in :download:`codingbat.rst <../code/session02/codingbat.rst>`

Volunteer to upload your solution to Slack!
